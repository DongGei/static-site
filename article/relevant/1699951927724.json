{"relevantArticles":[{"articleTitle":"HashMap相关的一系列问题","articleAbstractText":"HashMap相关的一系列问题","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699951902323.html","articleImg1URL":"https://b3logfile.com/bing/20230818.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"java面经总结","articleAbstractText":"java基础面 1.数组和链表结构简单对比？（ArrayList和linkedList） **数组是一段连续的空间。 大小固定 可能大小不够用或者有浪费 ** 数组查询比较方便，根据下标就可以直接找到元素，时间复杂度O(1)；增加和删除比较复杂，需要移动操作数所在位置后的所有数据，时间复杂度为O(N) 链表是使用是一种物理存储单元上非连续，非顺序的存储结构 插入、删除数据比较方便,时间复杂度O(1)；查询必须从头开始找起，十分麻烦，时间复杂度O(N) LinkedList 插入到中间位置并不快 比ArrayList还慢 因为要先遍历 除了头部插入 LinkedList快 其他都不如ArrayList  因为一个node里面有前后指针 所以占用内存多 2.类的初始化 对象实例化 类的初始化： **是完成程序执行前的准备工作。在这个阶段，**静态的（变量，方法，代码块）会被执行。同时在会开辟一块存储空间用来存放静态的数据。类初始化只在类加载的时候执行一次 类的实例化（实例化对象）： 是指创建一个对象的过程。这个过程中会在堆中开辟内存，将一些****非静态的方法，变量存放在里面。在程序执行的....","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699951852050.html","articleImg1URL":"https://b3logfile.com/file/2023/11/solo-fetchupload-9990781929491349813-TANyTLr.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"java 函数式编程","articleAbstractText":"java 函数式编程 1.为什么学 容于并发编程。可以使用并发 处理大数量集合，自动使用多线程去处理，而自己不用写线程有关代码。 可以简化代码，解决嵌套。 2.Lambda表达式 Lambda是JDK8中一个语法糖。他可以对某些匿名内部类的写法进行简化。它是函数式编程思想的一个重要体现。让我们不用关注是什么对象。而是更关注我们对数据进行了什么操作。 (参数列表)-&gt;{代码} 小括号 和 大括号 都还可以省略  语法糖： 简单的说，语法糖就是一种便捷写法。就相当于汉语里的成语。 tip: ctrl+p 查看传参提示 public class LambdaDemo_01 { public static void main(String[] args) { new Thread(new Runnable() { public void run() { System.out.println(\"_____新线程中run方法____\"); } }).start(); } }  上面这个Thread构造需要一个实现了Runnable接口的对象 我们使用了匿名内部类，并且重写了run方法，然后调....","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699946312113.html","articleImg1URL":"https://b3logfile.com/bing/20230311.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"}]}