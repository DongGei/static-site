{"relevantArticles":[{"articleTitle":"spring给静态成员注入 你试过吗?","articleAbstractText":"给静态成员注入 你试过吗? public class TempDataTransformUtilDto { @Autowired &nbsp; &nbsp;private static ICityCascadeService cityCascadeService; &nbsp; &nbsp;private static CstShareEmpMapper cstShareEmpMapper; &nbsp; &nbsp;private static PubUserInfoMapper pubUserInfoMapper; }  如果ICityCascadeService 通过@Service 注入的，@Autowired在这里是不管用的。 在使用时 会报错NullPointer !!!! 理解： 1.类成员的初始化较早，并不需要依赖实例的创建，所以这个时候Spring容器可能都还没\u201c出生\u201d，谈何依赖注入呢？ 2.当类加载器加载静态变量时，Spring的上下文环境还没有被加载。 3.AutowiredAnnotationBeanPostProcessor类源码，扫描Class类需要注入的元....","articleStatus":0,"articlePermalink":"/articles/2023/11/15/1700033835081.html","articleImg1URL":"https://b3logfile.com/bing/20180114.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"老项目迁移方法","articleAbstractText":"老项目迁移方法 需求： **因某个模块MySQL表结构、表关系 错乱复杂，**而且其他模块的代码也在操作这个模块的数据库 耦合严重 导致Web工程代码紊乱、不易理解、性能低下， 故在 系统由A JavaWeb工程迁移至B工程 时，重构MySQL表结构、表关系。 涉及到了数据库的重新设计和使用，需要考虑数据库的使用 采取的方法： 增删改查： 一期 是 全部的****写入 修改 删除 新旧表同时操作，新功能读取新表，** **旧功能因为太多，没法改 还是走旧表查询 二期是把所有的 其它模块读取旧表的全部改成读取新表，这个模块旧功能也走新表查询 然后把 旧表在数据库完全删除 写代码的逻辑是这样： 红色：由Web工程（SSH + JSP）重构至Service工程（SSM + VUE），此为模块核心业务逻辑。 黄色：接口定义-新表化改造（出入参改造），为前后端对接联调作准备，避免多次对接。 **绿色：进行全域新表双写的插入（增加、删除、修改 均处理完毕）。","articleStatus":0,"articlePermalink":"/articles/2023/11/15/1700033784334.html","articleImg1URL":"https://b3logfile.com/bing/20200122.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"超级经典之-超卖问题，避免一人多单，限流策略，隐藏url ，图片验证码，单用户频次限制，数据库缓存双写一致性","articleAbstractText":"JVM锁 DB加锁 Java分布式锁总结 超卖问题，避免一人多单，限流策略，隐藏url ，图片验证码，单用户频次限制，数据库缓存双写一致性","articleStatus":0,"articlePermalink":"/articles/2023/11/15/1700033663155.html","articleImg1URL":"https://b3logfile.com/bing/20190228.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"怎么保证数据唯一性","articleAbstractText":"悲观锁 unique索引","articleStatus":0,"articlePermalink":"/articles/2023/11/15/1700033502345.html","articleImg1URL":"https://b3logfile.com/bing/20190731.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"}]}