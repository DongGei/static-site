{"relevantArticles":[{"articleTitle":"java多线程","articleAbstractText":"JavaThread 概述 Thread，英文单词，名词、动词，作名词时意思是\u201c线；螺纹；思路；衣服；线状物；玻璃纤维；路线\u201d，java多线程。 进程是系统运行程序的基本单位，线程是比进程更小、更轻量级的执行单位，每个进程都拥有自己的一块内存空间和变量资源等，然而同一个进程下的多个线程则共享数据和资源，所以不管线程的创建和销毁工作，还是在线程之间切换工作，都要比进程更加轻量级、消耗系统资源更少。 多线程在多个cpu的机器上可以实现。如果只是单cpu，只是让我们看起来是多线程的。实际上运行的是靠cup的调度。而不是同时去执行的。 在jvm中 每一个线程都有自己的java虚拟机栈，本地方法栈，程序计数器。而对应的所有线程共享堆内存和元空间（以前版本也叫方法区）。与上一段文字进程和线程的关系对应。 创建多线程 声明一个Thread类的子类，子类中重写Thread类的run方法。Thread也实现了runnable接口 声明一个实现Runnable接口的类，类中实现run方法。 声明一个实现Callable接口的类（在初级阶段不需要太了解） 推荐使用runnable接口 **我认为最主要的原因....","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699951927724.html","articleImg1URL":"https://b3logfile.com/file/2023/11/solo-fetchupload-4795024217609908277-atSRtLT.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"HashMap相关的一系列问题","articleAbstractText":"HashMap相关的一系列问题","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699951902323.html","articleImg1URL":"https://b3logfile.com/bing/20230818.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"java面经总结","articleAbstractText":"java基础面 1.数组和链表结构简单对比？（ArrayList和linkedList） **数组是一段连续的空间。 大小固定 可能大小不够用或者有浪费 ** 数组查询比较方便，根据下标就可以直接找到元素，时间复杂度O(1)；增加和删除比较复杂，需要移动操作数所在位置后的所有数据，时间复杂度为O(N) 链表是使用是一种物理存储单元上非连续，非顺序的存储结构 插入、删除数据比较方便,时间复杂度O(1)；查询必须从头开始找起，十分麻烦，时间复杂度O(N) LinkedList 插入到中间位置并不快 比ArrayList还慢 因为要先遍历 除了头部插入 LinkedList快 其他都不如ArrayList  因为一个node里面有前后指针 所以占用内存多 2.类的初始化 对象实例化 类的初始化： **是完成程序执行前的准备工作。在这个阶段，**静态的（变量，方法，代码块）会被执行。同时在会开辟一块存储空间用来存放静态的数据。类初始化只在类加载的时候执行一次 类的实例化（实例化对象）： 是指创建一个对象的过程。这个过程中会在堆中开辟内存，将一些****非静态的方法，变量存放在里面。在程序执行的....","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699951852050.html","articleImg1URL":"https://b3logfile.com/file/2023/11/solo-fetchupload-9990781929491349813-TANyTLr.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}