{"relevantArticles":[{"articleTitle":"java垃圾回收机制","articleAbstractText":"java垃圾回收机制 可达性分析法 这个算法的基本思想是通过一系列称为\u201cGC Roots\u201d的对象作为起始点，从这些节点向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链（即GC Roots到对象不可达）时，则证明此对象是不可用的。 GCRoot: (1). 虚拟机栈（栈帧中的局部变量区，也叫做局部变量表）中引用的对象。 (2). 方法区中的类静态属性引用的对象。 (3). 方法区中常量引用的对象。 (4). 本地方法栈中JNI(Native方法)引用的对象。 标记去除算法 标记整理算法 复制回收算法 java的四种引用类型代码","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699959882168.html","articleImg1URL":"https://b3logfile.com/bing/20190917.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"java注解和反射","articleAbstractText":"javaSE\u2014注解和反射 一.注解 1.什么是注解 Annotation是从JDK5.0开始引入的概念 eg：@override 重写的注解 1.不是程序本身 给程序作出解释（） **2.**可以被其他程序读取 非必须 3.格式：@注释+注释名，还可以加一些参数值 4.有检查和约束的作用 可以放在方法或者类等等上面 .....注释是给人看的,注解是给人和机器看的 2.内置注解 @override 指示方法声明旨在覆盖超类型中的方法声明。 @Deprecated 已过时 不推荐使用的代码 @SuppressWarnings 镇压警告（可以放入参数） 3.元注解 **作用：负责注解其他注解 ** 4个标准的meta-annotation类型： **@Target ** 被描述的注解可以用在什么地方 @Target(value =ElementType.METHOD) 说明作用域在方法上 @Target(ElementType.FIELD) 作用域在属性上（成员变量） @Target(value ={ElementType.METHOD,ElementType.TYPE}) 说明作用域在方法....","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699959970120.html","articleImg1URL":"https://b3logfile.com/bing/20180508.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"java多线程","articleAbstractText":"JavaThread 概述 Thread，英文单词，名词、动词，作名词时意思是\u201c线；螺纹；思路；衣服；线状物；玻璃纤维；路线\u201d，java多线程。 进程是系统运行程序的基本单位，线程是比进程更小、更轻量级的执行单位，每个进程都拥有自己的一块内存空间和变量资源等，然而同一个进程下的多个线程则共享数据和资源，所以不管线程的创建和销毁工作，还是在线程之间切换工作，都要比进程更加轻量级、消耗系统资源更少。 多线程在多个cpu的机器上可以实现。如果只是单cpu，只是让我们看起来是多线程的。实际上运行的是靠cup的调度。而不是同时去执行的。 在jvm中 每一个线程都有自己的java虚拟机栈，本地方法栈，程序计数器。而对应的所有线程共享堆内存和元空间（以前版本也叫方法区）。与上一段文字进程和线程的关系对应。 创建多线程 声明一个Thread类的子类，子类中重写Thread类的run方法。Thread也实现了runnable接口 声明一个实现Runnable接口的类，类中实现run方法。 声明一个实现Callable接口的类（在初级阶段不需要太了解） 推荐使用runnable接口 **我认为最主要的原因....","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699951927724.html","articleImg1URL":"https://b3logfile.com/file/2023/11/solo-fetchupload-4795024217609908277-atSRtLT.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"HashMap相关的一系列问题","articleAbstractText":"HashMap相关的一系列问题","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699951902323.html","articleImg1URL":"https://b3logfile.com/bing/20230818.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"java集合（进阶）","articleAbstractText":"集合（进阶） 一.集合类体系结构 1.Collection （单列）---&gt;&gt;List（可重复）---&gt;&gt;ArrayList ** ---&gt;&gt;Linkedlist ** ---&gt;&gt;set(不可重复)---&gt;&gt;HashSet ** ---&gt;&gt;TreeSet **2.Map 双列---&gt;&gt;HashMap Collection,Map, List,set是接口，4个是实现类 后面的可以使用前面类里的方法 二.collection集合 1.概述及常用方法 **boolean add(E e) ** ** **向集合添加元素e，若指定集合元素改变了则返回true boolean addAll(Collection&lt;? extends E&gt; c) ** **把集合C中的元素全部添加到集合中，若指定集合元素改变返回true void clear() ** **清空所有集合元素 boolean contains(Object o) ** **判断指定集合是否包含对象o boolean containsAll....","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699959935349.html","articleImg1URL":"https://b3logfile.com/bing/20220615.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"}]}