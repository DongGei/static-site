{"randomArticles":[{"articleTitle":"java垃圾回收机制","articleAbstractText":"java垃圾回收机制 可达性分析法 这个算法的基本思想是通过一系列称为\u201cGC Roots\u201d的对象作为起始点，从这些节点向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链（即GC Roots到对象不可达）时，则证明此对象是不可用的。 GCRoot: (1). 虚拟机栈（栈帧中的局部变量区，也叫做局部变量表）中引用的对象。 (2). 方法区中的类静态属性引用的对象。 (3). 方法区中常量引用的对象。 (4). 本地方法栈中JNI(Native方法)引用的对象。 标记去除算法 标记整理算法 复制回收算法 java的四种引用类型代码","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699959882168.html","articleImg1URL":"https://b3logfile.com/bing/20190917.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"elasticsearch基础","articleAbstractText":"ES 1.了解是什么？ 强大开源****搜索引擎。海量数据中搜索 elasticsearch结合kibana,Logstash,beats组件，也叫SLK(elastic stack).应用于日志数据分析，实时监控等 kibana,Logstash,beat属于是官方提供给你，你想用就用。 elasticsearch是基于Luncene(java语言的搜索引擎类库【其实就是个jar包】。Hadoop和Luncene是同一个作者)开发。 elasticsearch：支持分布式，水平扩展，提供restful接口，其他语言可调用。 2.正向索引和倒排索引 这种模糊会全表扫描 倒排索引： 标题 LIKE %abc% 正排是一行一行去找，根据一行的标题去对比abc。根据内容去对比词条 倒排的意义或者含义就是，先找到词条，再找到行数据（文档） 一行数据就是一个文档，词条相当于是标签类似。词条是不重复的。Mapstring。 可以根据词条创建唯一索引，查询的速度比较快。 右上图中的查找，进行了两次查表。每一次都利用了索引 擅长于部分的这种模糊查询 文档（行数据 se是面向文档存储的，（也就是mysq....","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699960138443.html","articleImg1URL":"https://b3logfile.com/bing/20210306.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"java 函数式编程","articleAbstractText":"java 函数式编程 1.为什么学 容于并发编程。可以使用并发 处理大数量集合，自动使用多线程去处理，而自己不用写线程有关代码。 可以简化代码，解决嵌套。 2.Lambda表达式 Lambda是JDK8中一个语法糖。他可以对某些匿名内部类的写法进行简化。它是函数式编程思想的一个重要体现。让我们不用关注是什么对象。而是更关注我们对数据进行了什么操作。 (参数列表)-&gt;{代码} 小括号 和 大括号 都还可以省略  语法糖： 简单的说，语法糖就是一种便捷写法。就相当于汉语里的成语。 tip: ctrl+p 查看传参提示 public class LambdaDemo_01 { public static void main(String[] args) { new Thread(new Runnable() { public void run() { System.out.println(\"_____新线程中run方法____\"); } }).start(); } }  上面这个Thread构造需要一个实现了Runnable接口的对象 我们使用了匿名内部类，并且重写了run方法，然后调....","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699946312113.html","articleImg1URL":"https://b3logfile.com/bing/20230311.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"红黑树  B  B+树","articleAbstractText":"红黑树 B B+树 --&gt;演化进程","articleStatus":0,"articlePermalink":"/articles/2023/11/14/1699951773941.html","articleImg1URL":"https://b3logfile.com/bing/20171109.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"}]}